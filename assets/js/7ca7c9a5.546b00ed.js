"use strict";(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[1319],{7060:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"customization/themeprovider","title":"Theme Provider","description":"The previous solution works great for only one component, but imagine having to","source":"@site/versioned_docs/version-5.1.3/customization/themeprovider.mdx","sourceDirName":"customization","slug":"/customization/themeprovider","permalink":"/docs/customization/themeprovider","draft":false,"unlisted":false,"editUrl":"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-5.1.3/customization/themeprovider.mdx","tags":[],"version":"5.1.3","sidebarPosition":2,"frontMatter":{"title":"Theme Provider","sidebar_position":2}}');var o=n(74848),s=n(28453),i=n(34430),h=n(76813);const c={title:"Theme Provider",sidebar_position:2},d=void 0,a={},m=[{value:"<code>createTheme</code>",id:"createtheme",level:3},{value:"<code>useTheme</code>",id:"usetheme",level:3},{value:"<code>useThemeMode</code>",id:"usethememode",level:3},{value:"<code>withTheme</code>",id:"withtheme",level:3},{value:"More examples",id:"more-examples",level:2},{value:"Using with React Navigation",id:"using-with-react-navigation",level:3},{value:"Switch theme mode with useColorScheme",id:"switch-theme-mode-with-usecolorscheme",level:3},{value:"Theme mode based background color",id:"theme-mode-based-background-color",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.p,{children:"The previous solution works great for only one component, but imagine having to\r\ndo this for every component you want custom styles for. That could get a bit\r\ntedious to manage. Thankfully, there's a better way to do this. React Native\r\nElements ships with a 3 utilities for large-scale theming."}),"\n",(0,o.jsxs)(r.p,{children:["Firstly you'll want to set up your ",(0,o.jsx)(r.code,{children:"ThemeProvider"}),"."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Import"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import { ThemeProvider } from '@rn-vui/themed';\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Usage"})}),"\n",(0,o.jsxs)(r.p,{children:["Use ",(0,o.jsx)(r.a,{href:"#createtheme",children:"createTheme"})," to generate a theme object. Then, pass it as a prop to ThemeProvider."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:"const theme = createTheme({\r\n  lightColors: {\r\n    primary: 'red',\r\n  },\r\n  darkColors: {\r\n    primary: 'blue',\r\n  },\r\n  components: {\r\n    Button: {\r\n      raised: true,\r\n    },\r\n  },\r\n});\r\n\r\n// Your App\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Button>My Button</Button>\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsxs)(r.p,{children:["If you do not specify ",(0,o.jsx)(r.code,{children:"theme"})," in ThemeProvider, it would use ",(0,o.jsx)(r.a,{href:"./theme_object#default-light-colors",children:"defaultTheme"})]})}),"\n",(0,o.jsx)(r.admonition,{type:"tip",children:(0,o.jsxs)(r.p,{children:["Want to use custom color? refer ",(0,o.jsx)(r.a,{href:"./extending#adding-custom-colors",children:"extending colors"})]})}),"\n",(0,o.jsxs)(r.p,{children:["The example above achieves the same goals as the first example \u2014 apply the same\r\nstyles to multiple instances of ",(0,o.jsx)(r.code,{children:"Button"})," in the app. However this example\r\napplies the ",(0,o.jsx)(r.code,{children:"raised"})," prop to every instance of ",(0,o.jsx)(r.code,{children:"Button"})," inside the component\r\ntree under ",(0,o.jsx)(r.code,{children:"ThemeProvider"}),". Both of these buttons will have the ",(0,o.jsx)(r.code,{children:"raised"})," prop\r\nset to true."]}),"\n",(0,o.jsxs)(r.p,{children:["This is extremely convenient and is made possible through\r\n",(0,o.jsx)(r.a,{href:"https://reactjs.org/docs/context.html",children:"React's Context API"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"createtheme",children:(0,o.jsx)(r.code,{children:"createTheme"})}),"\n",(0,o.jsx)(r.p,{children:"Generate a theme base on the options received. Then, pass it as a prop to ThemeProvider."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"createTheme({\r\n  lightColors: Colors,\r\n  darkColors: Colors,\r\n  mode: 'light' | 'dark',\r\n  components: {\r\n    componentName: (props, theme) => ({\r\n      // Props\r\n    }),\r\n  },\r\n});\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"How it works"})}),"\n",(0,o.jsx)(i.A,{alt:"how createTheme works internally",sources:{light:(0,h.Ay)("/img/docs/light.png"),dark:(0,h.Ay)("/img/docs/dark.png")}}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsxs)(r.p,{children:["To theme subcomponents such as ",(0,o.jsx)(r.code,{children:"ListItem.Title"}),', in your theme remove the dot and list them as "ListItemTitle"']})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"usetheme",children:(0,o.jsx)(r.code,{children:"useTheme"})}),"\n",(0,o.jsxs)(r.p,{children:["Hook returns ",(0,o.jsx)(r.code,{children:"theme"}),", ",(0,o.jsx)(r.code,{children:"updateTheme"})," & ",(0,o.jsx)(r.code,{children:"replaceTheme"})," from ThemeProvider context or default theme if you did not wrap application with ThemeProvider."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import { useTheme } from '@rn-vui/themed';\r\n\r\nfunction Demo() {\r\n  const { theme, updateTheme } = useTheme();\r\n  return (\r\n    <View style={{ background: theme.colors.primary }}>\r\n      <Button onPress={() => updateTheme({ colors: { primary: 'red' } })} />\r\n    </View>\r\n  );\r\n}\n"})}),"\n",(0,o.jsx)(r.p,{children:"The updateTheme function merges the theme passed in with the current theme."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"updateTheme({\r\n  lightColors: {\r\n    primary: 'purple',\r\n  },\r\n});\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"replaceTheme"})," function merges the theme passed in with the default theme."]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Want single-theme?"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:"const theme = createTheme({\r\n  // Use only one color scheme\r\n  lightColors: {\r\n    primary: 'red',\r\n  },\r\n  // And set that mode as default\r\n  mode: 'light',\r\n  components: {\r\n    Button: {\r\n      raised: true,\r\n    },\r\n  },\r\n});\r\n\r\n// Your App\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Button>My Button</Button>\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"usethememode",children:(0,o.jsx)(r.code,{children:"useThemeMode"})}),"\n",(0,o.jsx)(r.p,{children:"You can get current theme mode (light or dark) and update it using setMode function from useThemeMode hook."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import { useThemeMode } from '@rn-vui/themed';\r\n\r\nfunction Demo() {\r\n  const { mode, setMode } = useThemeMode();\r\n\r\n  return <Button onPress={() => setMode('dark')} title={mode} />;\r\n}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"withtheme",children:(0,o.jsx)(r.code,{children:"withTheme"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Function Signture"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"withTheme<Props>(Component, ?themeKey)\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Usage"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import { withTheme, ThemeProps } from '@rn-vui/themed';\r\n\r\ntype CustomComponentProps = {\r\n  title: string;\r\n  titleStyle: StyleProps<TextStyle>;\r\n};\r\n\r\nconst CustomComponent = (props: ThemeProps<CustomComponentProps>) => {\r\n  // Access theme from props\r\n  const { theme, updateTheme, replaceTheme } = props;\r\n  // ...\r\n};\r\n\r\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Don't want to wrap your components with ",(0,o.jsx)(r.code,{children:"withTheme"}),"? You can use the ",(0,o.jsx)(r.code,{children:"ThemeConsumer"})," component\r\nwhich uses render props!"]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Usage"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import React from 'react';\r\nimport { Text } from 'react-native';\r\nimport { ThemeConsumer } from '@rn-vui/themed';\r\n\r\nconst MyComponent = () => (\r\n  <ThemeConsumer>\r\n    {({ theme }) => (\r\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\r\n    )}\r\n  </ThemeConsumer>\r\n)\n"})}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"more-examples",children:"More examples"}),"\n",(0,o.jsx)(r.h3,{id:"using-with-react-navigation",children:"Using with React Navigation"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:"https://reactnavigation.org/",children:"React Navigation"})," uses it's own ",(0,o.jsx)(r.a,{href:"https://reactnavigation.org/docs/themes/",children:"theming"}),", you can use RNE UI's theme with it."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"const Navigation = () => {\r\n  const { theme } = useTheme();\r\n\r\n  return (\r\n    <NavigationContainer\r\n      theme={{\r\n        colors: {\r\n          primary: theme.colors.primary,\r\n          background: theme.colors.background,\r\n          card: theme.colors.white,\r\n          text: theme.colors.black,\r\n        },\r\n        dark: theme.mode === 'dark',\r\n      }}\r\n    >\r\n      {/*  Navigators */}\r\n    </NavigationContainer>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"const theme=createTheme({\r\n  // ...\r\n})\r\n\r\nexport const App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Navigation>\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(r.h3,{id:"switch-theme-mode-with-usecolorscheme",children:"Switch theme mode with useColorScheme"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Usage"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import { useColorScheme } from 'react-native';\r\n\r\nconst theme = createTheme({\r\n  // ...\r\n});\r\n\r\nexport const App = () => {\r\n  theme.mode = useColorScheme();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      {/*...*/}\r\n      {/*...*/}\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(r.h3,{id:"theme-mode-based-background-color",children:"Theme mode based background color"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"const Background = ({ children }) => {\r\n  const styles = useStyles();\r\n  return <View style={styles.container}>{children}</View>;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    backgroundColor: theme.colors.background,\r\n  },\r\n}));\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Usage"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"const theme = createTheme({\r\n  // default mode\r\n  mode: 'dark',\r\n});\r\n\r\nexport default function App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Background>\r\n        {/*...*/}\r\n        {/*...*/}\r\n      </Background>\r\n    </ThemeProvider>\r\n  );\r\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);