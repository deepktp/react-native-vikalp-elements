"use strict";(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[9973],{49622:e=>{e.exports=JSON.parse('{"permalink":"/blog/2021/08/12/auto-generation-of-docs","source":"@site/blog/2021-08-12-auto-generation-of-docs.md","title":"Auto-generation of Documentation Website","description":"This is a guide to generate documentation of the UI components automatically.","date":"2021-08-12T00:00:00.000Z","tags":[],"readingTime":3.94,"hasTruncateMarker":true,"authors":[{"name":"khushal","url":"https://github.com/khushal87","key":null,"page":null}],"frontMatter":{"title":"Auto-generation of Documentation Website","author":"khushal","authorURL":"https://github.com/khushal87"},"unlisted":false,"prevItem":{"title":"Google Summer of Code\'21 Khushal Agarwal","permalink":"/blog/2021/08/18/google-summer-of-code-khushal-agarwal"},"nextItem":{"title":"Version 2.3 Upgrade Guide","permalink":"/blog/2020/08/10/2.3-upgrade-guide"}}')},70569:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>c});var n=o(49622),s=o(74848),i=o(28453);const a={title:"Auto-generation of Documentation Website",author:"khushal",authorURL:"https://github.com/khushal87"},r=void 0,h={authorsImageUrls:[void 0]},c=[{value:"Workflow",id:"workflow",level:2}];function l(e){const t={blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"This is a guide to generate documentation of the UI components automatically."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Initially when this workflow was not present, the entire documentation of the website was done by editing the docs manually by going to the ",(0,s.jsx)(t.code,{children:"docs"})," directory under ",(0,s.jsx)(t.code,{children:"website"})," and editing the markdown manually. Now, we have come with a flow where developers and contributors can focus more on logic than on writing markdown."]}),"\n",(0,s.jsx)(t.h2,{id:"workflow",children:"Workflow"}),"\n",(0,s.jsx)(t.p,{children:"To do this we have created scripts which would parse the components and generate documentation out of it."}),"\n",(0,s.jsx)(t.p,{children:"This is a 2 step process:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["We take use of ",(0,s.jsx)(t.code,{children:"react-docgen-typescript"})," which takes the input of the files for which we want to generate the documentation automatically. This gives in JSON as output. This JSON consists of all the details of the props including ",(0,s.jsx)(t.code,{children:"type"}),", ",(0,s.jsx)(t.code,{children:"name"}),", ",(0,s.jsx)(t.code,{children:"description"})," and ",(0,s.jsx)(t.code,{children:"defaultValue"})," and well as ",(0,s.jsx)(t.code,{children:"description"})," of the components."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["As we use Docusaurus for our documentation website, the pages of the documentation should be in the format of Markdown. Therefore, there should be process where we can change the JSON data, which we get from ",(0,s.jsx)(t.code,{children:"react-docgen-typescript"})," to a suitable Markdown format. For this we use, ",(0,s.jsx)(t.code,{children:"json2md"})," which takes in the data and convert it to suitable markdown string. This is stored in the directory and is shown on the website."]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);