"use strict";(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[7010],{6703:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>t});const o=JSON.parse('{"type":"mdx","permalink":"/migration/migration-v3","source":"@site/src/pages/migration/migration-v3.mdx","title":"Migration to v4","description":"Introduction","frontMatter":{},"unlisted":false}');var s=r(74848),l=r(28453);const i={},d="Migration to v4",c={},t=[{value:"Introduction",id:"introduction",level:2},{value:"Core changes",id:"core-changes",level:2},{value:"Colors",id:"colors",level:3},{value:"Theme",id:"theme",level:3},{value:"Pressable",id:"pressable",level:3},{value:"Components",id:"components",level:2},{value:"<code>Avatar</code>",id:"avatar",level:3},{value:"<code>Button</code>",id:"button",level:3},{value:"<code>ThemeProvider</code>",id:"themeprovider",level:3},{value:"<code>Tooltip</code>",id:"tooltip",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"migration-to-v4",children:"Migration to v4"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.h2,{id:"core-changes",children:"Core changes"}),"\n",(0,s.jsx)(n.p,{children:"To use the v4 version, you first need to update the package names:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"- import {} from 'react-native-elements'\r\n+ import {} from '@rn-vui/themed'\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can install the packages from npm or yarn"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @rn-vui/base @rn-vui/themed\r\n\r\n# or with yarn\r\nyarn add @rn-vui/base @rn-vui/themed\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can also make ",(0,s.jsx)(n.code,{children:"alias"})," for package to help you with migration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add react-native-elements@npm:@rn-vui/themed\n"})}),"\n",(0,s.jsx)(n.h3,{id:"colors",children:"Colors"}),"\n",(0,s.jsxs)(n.p,{children:["Added a new ",(0,s.jsx)(n.code,{children:"background"})," color to the ",(0,s.jsx)(n.code,{children:"colors"})," object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"const colors={\r\n  primary: '#2e7d32',\r\n  secondary: '#757575',\r\n+ background: '#ffffff',\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"- import { colors } from 'react-native-elements'\r\n+ import { lightColors, darkColors } from '@rn-vui/themed'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"theme",children:"Theme"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"const theme:FullTheme={\r\n  colors:{},\r\n+ spacing:{}\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pressable",children:"Pressable"}),"\n",(0,s.jsxs)(n.p,{children:["These components are now using ",(0,s.jsx)(n.code,{children:"Pressable"})," instead of ",(0,s.jsx)(n.code,{children:"Touchable"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avatar"}),"\n",(0,s.jsx)(n.li,{children:"Badge"}),"\n",(0,s.jsx)(n.li,{children:"ButtonGroup"}),"\n",(0,s.jsx)(n.li,{children:"CheckBox"}),"\n",(0,s.jsx)(n.li,{children:"Icon"}),"\n",(0,s.jsx)(n.li,{children:"Image"}),"\n",(0,s.jsx)(n.li,{children:"ListItem"}),"\n",(0,s.jsx)(n.li,{children:"SearchBar"}),"\n",(0,s.jsx)(n.li,{children:"SpeedDial"}),"\n",(0,s.jsx)(n.li,{children:"Tile"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/pressable",children:"Pressable"})," is a Core Component wrapper that can detect various stages of press interactions on any of its defined children."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This change would let you use ",(0,s.jsx)(n.code,{children:"onPressIn"})," & ",(0,s.jsx)(n.code,{children:"onPressOut"})," APIs in components, For example"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'  <CheckBox\r\n    title="I agree"\r\n    onPress={()=>{}}\r\n    onLongPress={()=>{}}\r\n+   onPressIn={()=>{}}\r\n+   onPressOut={()=>{}}\r\n    onPress={() => {}}\r\n  />\n'})}),"\n",(0,s.jsxs)(n.p,{children:["and the rest of props for ",(0,s.jsx)(n.code,{children:"Pressable"})," can be added via ",(0,s.jsx)(n.code,{children:"pressableProps"})," API"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"  <ButtonGroup\r\n+   pressableProps={{android_ripple:{radius:2}}}\r\n  />\n"})}),"\n",(0,s.jsxs)(n.p,{children:["few other props (like ",(0,s.jsx)(n.code,{children:"underlayColor"}),") will not be supported, you can remove them."]}),"\n",(0,s.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,s.jsx)(n.h3,{id:"avatar",children:(0,s.jsx)(n.code,{children:"Avatar"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"placeholderStyle"})," and ",(0,s.jsx)(n.code,{children:"renderPlaceholderContent"})," props are removed and is replaced by ",(0,s.jsx)(n.code,{children:"renderCustomContent"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'  <Avatar\r\n-   renderPlaceholderContent={\r\n-       <Text testID="my-custom-placeholder">Hey</Text>\r\n-     }\r\n-   placeholderStyle = {{backgroundColor:"red"}}\r\n+   renderCustomContent={<Text>Hey</Text>}\r\n+  />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"button",children:(0,s.jsx)(n.code,{children:"Button"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"  <Button\r\n+  size='sm',\r\n+  radius='md'\r\n+  color='primary'\r\n-  title='Press me'\r\n-  />\r\n+  >\r\n+ Press me\r\n+ </Button>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"themeprovider",children:(0,s.jsx)(n.code,{children:"ThemeProvider"})}),"\n",(0,s.jsxs)(n.p,{children:["Please make sure that ",(0,s.jsx)(n.code,{children:"ThemeProvider"})," is defined at the root of your application (even if you are using the default theme) and ",(0,s.jsx)(n.code,{children:"NO"})," useStyles or useTheme is called before ",(0,s.jsx)(n.code,{children:"<ThemeProvider>"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'- <ThemeProvider theme={myTheme} useDark={false}>\r\n+ <ThemeProvider theme={myTheme}>\r\n     <Button title="My Button" />\r\n   </ThemeProvider>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Create custom theme using ",(0,s.jsx)(n.code,{children:"createTheme"})," helper"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"- const myTheme: FullTheme = {\r\n+ const myTheme = createTheme({\r\n-  colors: {\r\n+  lightColors:{\r\n     primary: '#f2f2f2',\r\n   },\r\n+  darkColors: {\r\n+   primary: '#121212',\r\n+  },\r\n+  mode: 'dark',\r\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Since ",(0,s.jsx)(n.code,{children:"useDark"})," is deprecated, you can switch ",(0,s.jsx)(n.code,{children:"dark"})," and ",(0,s.jsx)(n.code,{children:"light"})," themeColors using ",(0,s.jsx)(n.code,{children:"updateTheme"})," function which can be access from ",(0,s.jsx)(n.code,{children:"useTheme"})," hook."]}),"\n",(0,s.jsx)(n.p,{children:"Complete example of root of our application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { ThemeProvider, Button, createTheme } from '@rn-vui/themed';\r\n\r\nconst myTheme = createTheme({\r\n  lightColors: {\r\n    primary: '#f2f2f2',\r\n  },\r\n  darkColors: {\r\n    primary: '#121212',\r\n  },\r\n  mode: 'dark',\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={myTheme}>\r\n      <Button title=\"My Button\" />\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can use props for components while defining themes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { createTheme } from '@rn-vui/themed';\r\n\r\nconst myTheme = createTheme({\r\n  components: {\r\n    Button: (buttonProps) => ({\r\n      titleStyle: {\r\n        color: buttonProps.type === 'solid' ? 'blue' : 'red',\r\n      },\r\n    }),\r\n  },\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Thus when we use ",(0,s.jsx)(n.code,{children:"type='solid'"})," in ",(0,s.jsx)(n.code,{children:"Button"})," component, it will use ",(0,s.jsx)(n.code,{children:"titleStyle"}),' will have "blue" color.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"<Button type='solid'>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Refer to ",(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/customization",children:"Customization"})," for more details."]}),"\n",(0,s.jsx)(n.h3,{id:"tooltip",children:(0,s.jsx)(n.code,{children:"Tooltip"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Tooltip"})," is one of core component of RNE, Since v4 this component would be stateless and would use ",(0,s.jsx)(n.code,{children:"visible"}),", ",(0,s.jsx)(n.code,{children:"onOpen"})," & ",(0,s.jsx)(n.code,{children:"onClose"})," Props for its working."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:'  <Tooltip\r\n+   visible={open}\r\n+   onOpen={() => {\r\n+      setOpen(true);\r\n+   }}\r\n+   onClose={() => {\r\n+      setOpen(false);\r\n+   }}\r\n    popover="Hey All"\r\n  />\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can still use Tooltip as stateful component by doing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const ControlledTooltip: React.FC<TooltipProps> = (props) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  return (\r\n    <Tooltip\r\n      visible={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);