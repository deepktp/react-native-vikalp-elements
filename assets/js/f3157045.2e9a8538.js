"use strict";(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[9548],{26395:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"customization/extending","title":"Extending Theme","description":"TypeScript definitions for your theme can be extended by using TypeScript\'s declaration merging feature. First you need to create a declaration file called themed.d.ts and then declare the module @rn-vui/themed and \'re-export\' the types that you want to extend. i.e. below we add a custom p1Style to the Text theme object and we add a bunch of colors to the colors object.","source":"@site/versioned_docs/version-5.0.0/customization/extending.mdx","sourceDirName":"customization","slug":"/customization/extending","permalink":"/docs/5.0.0/customization/extending","draft":false,"unlisted":false,"editUrl":"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-5.0.0/customization/extending.mdx","tags":[],"version":"5.0.0","sidebarPosition":4,"frontMatter":{"sidebar_label":"Extending Theme","title":"Extending Theme","sidebar_position":4},"sidebar":"docs","previous":{"title":"Styles","permalink":"/docs/5.0.0/customization/styles"},"next":{"title":"Common Pitfalls","permalink":"/docs/5.0.0/customization/pitfall"}}');var o=t(74848),s=t(28453);const i={sidebar_label:"Extending Theme",title:"Extending Theme",sidebar_position:4},d=void 0,c={},a=[{value:"Adding custom colors",id:"adding-custom-colors",level:3},{value:"Adding custom &#39;other&#39; properties",id:"adding-custom-other-properties",level:3},{value:"Extending RNE default components",id:"extending-rne-default-components",level:3},{value:"Using the theme in your own components",id:"using-the-theme-in-your-own-components",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["TypeScript definitions for your theme can be extended by using TypeScript's ",(0,o.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html",children:"declaration merging"})," feature. First you need to create a declaration file called ",(0,o.jsx)(n.code,{children:"themed.d.ts"})," and then declare the module ",(0,o.jsx)(n.code,{children:"@rn-vui/themed"})," and 're-export' the types that you want to extend. i.e. below we add a custom ",(0,o.jsx)(n.code,{children:"p1Style"})," to the ",(0,o.jsx)(n.code,{children:"Text"})," theme object and we add a bunch of colors to the ",(0,o.jsx)(n.code,{children:"colors"})," object."]}),"\n",(0,o.jsx)(n.h3,{id:"adding-custom-colors",children:"Adding custom colors"}),"\n",(0,o.jsxs)(n.p,{children:["TypeScript will only autocomplete RNE's default colors when accessing the theme. To add your custom colors to the ",(0,o.jsx)(n.code,{children:"Colors"})," type, you can use TypeScript module declaration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// themed.d.ts\r\nimport '@rn-vui/themed';\r\n\r\ndeclare module '@rn-vui/themed' {\r\n  export interface Colors {\r\n    tertiary: string;\r\n    accent: string;\r\n    surface: string;\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then when you create your ",(0,o.jsx)(n.code,{children:"ThemeProvider"})," instance,"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// App.tsx\r\nconst theme = createTheme({\r\n  lightColors: {\r\n    tertiary: '#124789',\r\n    accent: '#f98652',\r\n    surface: '#0990763',\r\n  },\r\n  darkColors: {\r\n    tertiary: '#124789',\r\n    accent: '#908652',\r\n    surface: '#0990763',\r\n  },\r\n  components:{\r\n    Button:(props,theme)=>({\r\n      containerStyle:{\r\n        backgroundColor:theme.colors.tertiary\r\n      }\r\n    })\r\n  }\r\n  mode: 'light', // or 'dark'\r\n});\r\n\r\n// Wrap with ThemeProvider\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Component />\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Component.tsx\r\nexport const Component = () => {\r\n  const { theme } = useTheme();\r\n  return <Text style={{ color: theme.colors.accent }} />;\r\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"adding-custom-other-properties",children:"Adding custom 'other' properties"}),"\n",(0,o.jsxs)(n.p,{children:["Similar to how you can extend/set custom colors, you can add your own properties to the ",(0,o.jsx)(n.code,{children:"theme"})," type using TypeScript module declaration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// themed.d.ts\r\nimport '@rn-vui/themed';\r\n\r\ndeclare module '@rn-vui/themed' {\r\n  export interface Theme {\r\n    myCustomProperty: string;\r\n    myCustomFunction: () => void;\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// App.tsx\r\nconst App = () => {\r\n  const { theme } = useTheme();\r\n  return <Text>{theme.myCustomProperty}</Text>;\r\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"extending-rne-default-components",children:"Extending RNE default components"}),"\n",(0,o.jsxs)(n.p,{children:["If you need to extend some props of RNE's default components, you can use TypeScript module declaration, Also remember to extend ",(0,o.jsx)(n.code,{children:"ComponentTheme"})," too."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// themed.d.ts\r\nimport '@rn-vui/themed';\r\n\r\ndeclare module '@rn-vui/themed' {\r\n  export interface TextProps {\r\n    bold: boolean;\r\n  }\r\n\r\n  export interface ComponentTheme {\r\n    Text: Partial<TextProps>;\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For eg. You can use the following code to extend the ",(0,o.jsx)(n.code,{children:"Text"})," component:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const myTheme = createTheme({\r\n  Text: (props) => ({\r\n    style: {\r\n      fontWeight: props.bold ? 'bold' : 'normal',\r\n    },\r\n  }),\r\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"and use it like this"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const App = () => {\r\n  const { theme } = useTheme();\r\n  return (\r\n    <View>\r\n      <Text>Normal Text</Text>\r\n      <Text bold>Bold Text</Text>\r\n    </View>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"using-the-theme-in-your-own-components",children:"Using the theme in your own components"}),"\n",(0,o.jsxs)(n.p,{children:["You may want to make use of the theming utilities in your own components. For this you can use the ",(0,o.jsx)(n.code,{children:"withTheme(Component,ComponentThemeKey)"})," HOC exported from this library. It adds three props to the component it wraps - theme, updateTheme and replaceTheme."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { withTheme } from '@rn-vui/themed';\r\n\r\ntype CustomComponentProps = {\r\n  title: string;\r\n  titleStyle: StyleProps<TextStyle>;\r\n};\r\n\r\nconst CustomComponent = (props: CustomComponentProps) => {\r\n  // Access theme from props\r\n  const { theme, updateTheme, replaceTheme } = props;\r\n  // ...\r\n};\r\n\r\nexport default withTheme<CustomComponentProps>(CustomComponent, 'ComponentKey');\r\n\r\ndeclare module '@rn-vui/themed' {\r\n  export interface ComponentTheme {\r\n    ComponentKey: Partial<CustomComponentProps>;\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { ThemeProvider, createTheme } from '@rn-vui/themed';\r\n\r\nconst myTheme = createTheme({\r\n  components: {\r\n    ComponentKey: {\r\n      titleStyle: {\r\n        color: 'red',\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={myTheme}>\r\n      <CustomComponent title=\"My Component\" />\r\n    </ThemeProvider>\r\n  );\r\n};\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"Theme Key for custom component must be unique"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);