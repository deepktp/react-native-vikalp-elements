(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[7437],{13952:(e,n,t)=>{"use strict";t.d(n,{A:()=>o});var s=t(96540),d=t(19553),l=t(37819),r=t(10171),c=t(11451),i=t(74848);const o=function(){var e=(0,r.A)({componentName:"ButtonGroup",props:{buttonStyle:{type:c.B.Object,value:"{width:100}"},buttonContainerStyle:{type:c.B.Object,value:"{}"},buttons:{type:c.B.Array,value:"['Hello', 'World', 'React',\"Native\",\"Elements\"]"},Component:{type:c.B.ReactNode,description:"React Native Component\tTouchableOpacity (ios) or TouchableNativeFeedback (android)",value:null},containerStyle:{type:c.B.Object,value:"{}"},disabled:{type:c.B.Array,description:"boolean OR number[]. Controls if buttons are disabled. Setting true makes all of them disabled, while using an array only makes those indices disabled.",value:"[3,4]"},disabledStyle:{type:c.B.Object,value:"{}"},disabledTextStyle:{type:c.B.Object,value:"{}"},disabledSelectedStyle:{type:c.B.Object,value:"{}"},disabledSelectedTextStyle:{type:c.B.Object,value:"{}"},innerBorderStyle:{type:c.B.Object,value:"{}"},onPress:{type:c.B.Function,value:"(selectedIdx) => setSelectedIndex(selectedIdx)",propHook:{what:"selectedIdx",into:"selectedIndex"}},selectMultiple:{type:c.B.Boolean,value:!1},selectedButtonStyle:{type:c.B.Object,value:"{}"},selectedIndex:{type:c.B.Number,value:"1",stateful:!0},selectedIndexes:{type:c.B.Array,value:"[]",stateful:!0},selectedTextStyle:{type:c.B.Object,value:"{}"},textStyle:{type:c.B.Object,value:"{}"},underlayColor:{type:c.B.String,value:null},vertical:{type:c.B.Boolean,value:!1}},scope:{ButtonGroup:d.ButtonGroup},imports:{"@rn-vui/base":{named:["ButtonGroup"]}}});return(0,i.jsx)(s.Fragment,{children:(0,i.jsx)(l.A,{params:e})})}},37819:(e,n,t)=>{"use strict";t.d(n,{A:()=>x});t(96540);var s=t(73906),d=t(32594),l=t(20018),r=t(96109),c=t(35882),i=t(34397),o=t(50546),a=t(25407),h=t(74848);const x=function(e){var n=e.params,t=e.containerStyle,x=void 0===t?{}:t;return(0,h.jsx)(s.A,{fallback:(0,h.jsx)(h.Fragment,{children:"Loading..."}),children:function(){return(0,h.jsx)(o.q9.Provider,{children:(0,h.jsxs)(o.Oy,{initialMetrics:a.Y,children:[(0,h.jsx)("div",{style:Object.assign({border:"1px solid var(--ifm-color-emphasis-200)",borderRadius:"var(--ifm-global-radius)",position:"relative"},x),children:(0,h.jsx)(d.A,Object.assign({},n.compilerProps,{minHeight:62,placeholder:l.A}))}),(0,h.jsx)(r.A,{msg:n.errorProps.msg,isPopup:!0}),(0,h.jsx)(c.A,Object.assign({},n.knobProps)),(0,h.jsx)(r.A,Object.assign({},n.errorProps)),(0,h.jsx)(i.w,Object.assign({},n.actions))]})})}})}},52352:()=>{},72786:()=>{},92867:()=>{},98716:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>j,contentTitle:()=>u,default:()=>y,frontMatter:()=>x,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"components/buttongroup","title":"ButtonGroup","description":"ButtonGroup is a linear set of segments, each of which function as a button that can display a different view/or perform a different action. Use a ButtonGroup to offer choices that are closely related but mutually exclusive. This component inherits all native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements.","source":"@site/docs/components/ButtonGroup.mdx","sourceDirName":"components","slug":"/components/buttongroup","permalink":"/docs/next/components/buttongroup","draft":false,"unlisted":false,"editUrl":"https://github.com/react-native-elements/react-native-elements/edit/next/website/docs/components/ButtonGroup.mdx","tags":[],"version":"current","frontMatter":{"id":"buttongroup","title":"ButtonGroup"},"sidebar":"docs","previous":{"title":"Button","permalink":"/docs/next/components/button"},"next":{"title":"Card","permalink":"/docs/next/components/card"}}');var d=t(74848),l=t(28453),r=t(77332),c=(t(1294),t(32678),t(91374)),i=t(35504);function o(e){const n={div:"div",...(0,l.R)(),...e.components};return(0,d.jsx)(n.div,{className:"snack-player","data-snack-name":"RNE ButtonGroup","data-snack-description":"Example usage","data-snack-code":"import%20React%2C%20%7BuseState%7D%20from%20'react'%0D%0Aimport%20%7B%20ButtonGroup%20%7D%20from%20'%40rn-vui%2Fthemed'%0D%0Aimport%20%7B%20Text%2C%20StyleSheet%20%7D%20from%20'react-native'%3B%0D%0A%0D%0Aexport%20default()%20%3D%3E%20%7B%0D%0Aconst%20%5BselectedIndex%2C%20setSelectedIndex%5D%20%3D%20useState(0)%3B%0D%0Aconst%20%5BselectedIndexes%2C%20setSelectedIndexes%5D%20%3D%20useState(%5B0%2C%202%2C%203%5D)%3B%0D%0Areturn%20(%0D%0A%20%20%3C%3E%0D%0A%20%20%20%20%3CText%20style%3D%7Bstyles.subHeader%7D%3EUsing%20Strings%3C%2FText%3E%0D%0A%20%20%20%20%3CButtonGroup%0D%0A%20%20%20%20%20%20buttons%3D%7B%5B'SIMPLE'%2C%20'BUTTON'%2C%20'GROUP'%5D%7D%0D%0A%20%20%20%20%20%20selectedIndex%3D%7BselectedIndex%7D%0D%0A%20%20%20%20%20%20onPress%3D%7B(value)%20%3D%3E%20%7B%0D%0A%20%20%20%20%20%20%20%20setSelectedIndex(value)%3B%0D%0A%20%20%20%20%20%20%7D%7D%0D%0A%20%20%20%20%20%20containerStyle%3D%7B%7B%20marginBottom%3A%2020%20%7D%7D%0D%0A%20%20%20%20%2F%3E%0D%0A%20%20%20%20%3CButtonGroup%0D%0A%20%20%20%20%20%20buttons%3D%7B%5B'Multiple'%2C%20'Select'%2C%20'Button'%2C%20'Group'%5D%7D%0D%0A%20%20%20%20%20%20selectMultiple%0D%0A%20%20%20%20%20%20selectedIndexes%3D%7BselectedIndexes%7D%0D%0A%20%20%20%20%20%20onPress%3D%7B(value)%20%3D%3E%20%7B%0D%0A%20%20%20%20%20%20%20%20setSelectedIndexes(value)%3B%0D%0A%20%20%20%20%20%20%7D%7D%0D%0A%20%20%20%20%20%20containerStyle%3D%7B%7B%20marginBottom%3A%2020%20%7D%7D%0D%0A%20%20%20%20%2F%3E%0D%0A%20%20%20%20%3CText%20style%3D%7Bstyles.subHeader%7D%3EUsing%20Components%3C%2FText%3E%0D%0A%20%20%3C%2F%3E%0D%0A)%0D%0A%7D%0D%0A%0D%0Aconst%20styles%20%3D%20StyleSheet.create(%7B%0D%0AsubHeader%3A%20%7B%0D%0A%20%20backgroundColor%20%3A%20%22%232089dc%22%2C%0D%0A%20%20color%20%3A%20%22white%22%2C%0D%0A%20%20textAlign%20%3A%20%22center%22%2C%0D%0A%20%20paddingVertical%20%3A%205%2C%0D%0A%20%20marginBottom%20%3A%2010%0D%0A%7D%0D%0A%7D)","data-snack-dependencies":"@rn-vui/themed,@rn-vui/base","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}var h=t(13952);const x={id:"buttongroup",title:"ButtonGroup"},u=void 0,j={},p=[{value:"Usage",id:"usage",level:2},{value:"Icon",id:"icon",level:3},{value:"Multi Select",id:"multi-select",level:3},{value:"Props",id:"props",level:2},{value:"Playground",id:"playground",level:2}];function b(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.y,{}),"\n",(0,d.jsxs)(n.p,{children:["ButtonGroup is a linear set of segments, each of which function as a button that can display a different view/or perform a different action. Use a ButtonGroup to offer choices that are closely related but mutually exclusive. This component inherits ",(0,d.jsx)(n.a,{href:"https://reactnative.dev/docs/touchablehighlight.html",children:"all native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements"}),"."]}),"\n",(0,d.jsxs)("div",{class:"row inline-flex-center",children:[(0,d.jsx)("div",{class:"col col--3",children:(0,d.jsx)("h4",{children:"Import"})}),(0,d.jsx)("div",{class:"col col--9",children:(0,d.jsx)(c.A,{children:"import { ButtonGroup } from '@rn-vui/themed';"})}),(0,d.jsx)("div",{class:"col col--3",children:(0,d.jsxs)("h4",{children:[(0,d.jsxs)(n.p,{children:["Theme Key"," "]}),(0,d.jsx)("a",{href:"../customizing#using-themeprovider",children:(0,d.jsx)(i.wfp,{})})]})}),(0,d.jsx)("div",{class:"col col--9",children:(0,d.jsx)(c.A,{children:"ButtonGroup"})})]}),"\n",(0,d.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,d.jsx)(n.h3,{id:"icon",children:"Icon"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",metastring:"live",live:"",children:'{\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n  return (\n    <ButtonGroup\n      buttonStyle={{ padding: 10 }}\n      selectedButtonStyle={{ backgroundColor: "#e2e2e2" }}\n      buttons={[\n        <Icon name="format-align-left" />,\n        <Icon name="format-align-center" />,\n        <Icon name="format-align-right" />,\n      ]}\n      selectedIndex={selectedIndex}\n      onPress={setSelectedIndex}\n    />\n  );\n}\n'})}),"\n",(0,d.jsx)(n.h3,{id:"multi-select",children:"Multi Select"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",metastring:"live",live:"",children:'{\n  const [selectedIndex, setSelectedIndex] = React.useState([]);\n  return (\n    <ButtonGroup\n      selectMultiple\n      buttonStyle={{ padding: 10 }}\n      selectedButtonStyle={{ backgroundColor: "#e2e2e2" }}\n      buttons={[\n        <Icon name="format-bold" />,\n        <Icon name="format-italic" />,\n        <Icon name="format-underline" />,\n      ]}\n      selectedIndexes={selectedIndex}\n      onPress={setSelectedIndex}\n    />\n  );\n}\n'})}),"\n",(0,d.jsx)(a,{}),"\n",(0,d.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,d.jsxs)("div",{class:"table-responsive",children:["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Name"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Default"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Component"})}),(0,d.jsx)(n.td,{children:"React Component"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Choose other button component such as TouchableOpacity."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"activeOpacity"})}),(0,d.jsx)(n.td,{children:"number"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Add active opacity to the button in buttonGroup."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"button"})}),(0,d.jsx)(n.td,{children:"object"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Button for the component."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"buttonContainerStyle"})}),(0,d.jsx)(n.td,{children:"View Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Specify styling for button containers."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"buttonStyle"})}),(0,d.jsx)(n.td,{children:"View Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Specify styling for button."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"buttons"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"(string"})," | ",(0,d.jsx)(n.code,{children:"ButtonComponent"})," | ",(0,d.jsx)(n.code,{children:"ButtonObject)[]"})]}),(0,d.jsx)(n.td,{}),(0,d.jsxs)(n.td,{children:["Array of buttons for component (required), if returning a component, must be an object with ",(0,d.jsx)(n.code,{children:"{ element: componentName }"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"containerStyle"})}),(0,d.jsx)(n.td,{children:"View Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Specify styling for main button container."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"disabled"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"boolean"})," | ",(0,d.jsx)(n.code,{children:"number[]"})]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsxs)(n.td,{children:["Controls if buttons are disabled. Setting ",(0,d.jsx)(n.code,{children:"true"})," makes all of them disabled, while using an array only makes those indices disabled."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"disabledSelectedStyle"})}),(0,d.jsx)(n.td,{children:"View Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Styling for each selected button when disabled."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"disabledSelectedTextStyle"})}),(0,d.jsx)(n.td,{children:"Text Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Styling for the text of each selected button when disabled."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"disabledStyle"})}),(0,d.jsx)(n.td,{children:"View Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Styling for each button when disabled."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"disabledTextStyle"})}),(0,d.jsx)(n.td,{children:"Text Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Styling for the text of each button when disabled."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"innerBorderStyle"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"{ color: string; width: number; }"})}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Update the styling of the interior border of the list of buttons."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onHideUnderlay"})}),(0,d.jsx)(n.td,{children:"Function"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Function called on hiding underlay."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onLongPress"})}),(0,d.jsx)(n.td,{children:"GestureResponderEventHandler"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Called when a long-tap gesture is detected."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onPress"})}),(0,d.jsx)(n.td,{children:"(...args: any[]) => void"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Function"})}),(0,d.jsx)(n.td,{children:"Method to update Button Group Index."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onPressIn"})}),(0,d.jsx)(n.td,{children:"GestureResponderEventHandler"}),(0,d.jsx)(n.td,{}),(0,d.jsxs)(n.td,{children:["Called when a touch is engaged before ",(0,d.jsx)(n.code,{children:"onPress"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onPressOut"})}),(0,d.jsx)(n.td,{children:"GestureResponderEventHandler"}),(0,d.jsx)(n.td,{}),(0,d.jsxs)(n.td,{children:["Called when a touch is released before ",(0,d.jsx)(n.code,{children:"onPress"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onShowUnderlay"})}),(0,d.jsx)(n.td,{children:"Function"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Function called on showing underlay."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"pressableProps"})}),(0,d.jsx)(n.td,{children:"PressableProps except click handlers"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"None"})}),(0,d.jsx)(n.td,{})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"selectMultiple"})}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Allows the user to select multiple buttons."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"selectedButtonStyle"})}),(0,d.jsx)(n.td,{children:"View Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Specify styling for selected button."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"selectedIndex"})}),(0,d.jsx)(n.td,{children:"number"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"null"})}),(0,d.jsx)(n.td,{children:"Current selected index of array of buttons."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"selectedIndexes"})}),(0,d.jsx)(n.td,{children:"number[]"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"[]"})}),(0,d.jsx)(n.td,{children:"Current selected indexes from the array of buttons."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"selectedTextStyle"})}),(0,d.jsx)(n.td,{children:"Text Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Specify specific styling for text in the selected state."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"setOpacityTo"})}),(0,d.jsx)(n.td,{children:"(value: number) => void"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Function to set the opacity."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"textStyle"})}),(0,d.jsx)(n.td,{children:"Text Style"}),(0,d.jsx)(n.td,{}),(0,d.jsx)(n.td,{children:"Specify specific styling for text."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"underlayColor"})}),(0,d.jsx)(n.td,{children:"string"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Color [Primary]"})}),(0,d.jsx)(n.td,{children:"Specify underlayColor for TouchableHighlight."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"vertical"})}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Display the ButtonGroup vertically."})]})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"playground",children:"Playground"}),"\n",(0,d.jsx)(h.A,{})]})}function y(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(b,{...e})}):b(e)}}}]);