"use strict";(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[4202],{32754:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"customization/styles","title":"Styles","description":"makeStyles","source":"@site/versioned_docs/version-5.1.3/customization/styles.mdx","sourceDirName":"customization","slug":"/customization/styles","permalink":"/docs/customization/styles","draft":false,"unlisted":false,"editUrl":"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-5.1.3/customization/styles.mdx","tags":[],"version":"5.1.3","sidebarPosition":3,"frontMatter":{"title":"Styles","sidebar_position":3}}');var r=s(74848),o=s(28453);const l={title:"Styles",sidebar_position:3},c=void 0,i={},d=[{value:"<code>makeStyles</code>",id:"makestyles",level:3},{value:"<code>styled</code>",id:"styled",level:3}];function a(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"makestyles",children:(0,r.jsx)(n.code,{children:"makeStyles"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Imports"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { makeStyles } from '@rn-vui/themed';\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Function Signture"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"makeStyles(styles: Styles | ((theme, props) => Styles))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you want to keep your styles outside the component use ",(0,r.jsx)(n.code,{children:"makeStyles()"})," (hook generator) to reference the ",(0,r.jsx)(n.code,{children:"theme"})," and component props (optional param)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"type Props = {\r\n  fullWidth?: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles((theme, props: Props) => ({\r\n  container: {\r\n    background: theme.colors.white,\r\n    width: props.fullWidth ? '100%' : 'auto',\r\n  },\r\n  text: {\r\n    color: theme.colors.primary,\r\n  },\r\n}));\r\n\r\nconst MyComponent = (props: Props) => {\r\n  const styles = useStyles(props);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.text}>Yo!</Text>\r\n    </View>\r\n  );\r\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"styled",children:(0,r.jsx)(n.code,{children:"styled"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Imports"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { styled } from '@rn-vui/themed';\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Function Signture"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"styled(Component)<Props>(styles: Styles | ((theme, props) => Styles))\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const Conatiner = styled(View)({\r\n  // default style of component\r\n  root: {\r\n    paddingHorizontal: 16,\r\n  },\r\n});\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const Surface = styled(View)((theme) => ({\r\n  // default style of component\r\n  root: {\r\n    backgroundColor: theme.colors.background,\r\n  },\r\n}));\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Using RNE's component"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const RedButton = styled(Button)({\r\n  containerStyle: {\r\n    backgroundColor: 'red',\r\n  },\r\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Using custom props"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"type MyCompProps = { bold?: boolean };\r\n\r\nconst Component = styled(Text)<MyCompProps>((theme, { bold }) => ({\r\n  root: {\r\n    fontWeight: bold ? 'bold' : 'normal',\r\n    color: theme.colors.primary,\r\n  },\r\n}));\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);